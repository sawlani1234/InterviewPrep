{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "9uO5aL9dB1DOIZg7AaQ-n",
      "type": "text",
      "x": 18864.388602484665,
      "y": 20179.748741040356,
      "width": 192.83990478515625,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aM",
      "roundness": null,
      "seed": 150733259,
      "version": 21,
      "versionNonce": 433451499,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761594280621,
      "link": null,
      "locked": false,
      "text": "DATA MODELLING \n\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "DATA MODELLING \n\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "cdVww6sve2ykOdCNva23A",
      "type": "text",
      "x": 18825.267508734665,
      "y": 20267.506553540356,
      "width": 1074.919189453125,
      "height": 1800,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aN",
      "roundness": null,
      "seed": 1333720971,
      "version": 3737,
      "versionNonce": 1311741707,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761596177017,
      "link": null,
      "locked": false,
      "text": "Different database model options \n\n1. Relational databases SQL\n   - have databases, tables, rows , columns,  \n   - structured data \n   - concept of primary key , indexes for faster querying of data \n   - foriegn key for refrential integrity \n   - provides ACID properties \n   - widely used , can be scalable (shared , partitioned what not\n\n2. Document Base \n   - Has data in document format\n   - ** suitable for requirement having changing data needs as data can be added on any row \n   - In SD interviewes the requirement is tight so data change need is hardly needed\n   - i.e. a key can have whole data into a document. (Denomoralized kind of form)\n   - updates can be expensive as need to read and update whole json \n   - queriyng becomes easy for a key having all data\n   - querying becomes difficult for corss join kind of operation across ids\n   -  Eg: MongoDb\n3. Wide Column \n   - Creates new column for insertion on rows eg each posts will have different column for a user in Cassandra\n   - its kind of append only hence optimised for writes like Casandra LSM tree \n   - high writes cases are analytics , timeseries etc\n   - Eg Casandra\n4. Key Value \n    - Simple in memory database used for caching , flags or storage sometimes\n    - as in memory they are faster than traditional SQLS \n    - mostly used with SQL to have something like caching layer for reads before SQL \n    - key , value pair , so data is mostly according to query pattern of keys \n    - Eg : Redis , DynamoDB\n5. Graph Database \n    - They have the storages as nodes and edges of graph \n    - almost never used in system design interviews\n    - even big social media companies like linkedin ,  facebook uses mysql \n\n\n\n\nSchema Design Fundamentals \n\n\n1. Start with requriements\n    a. Data volume - during requirement gathering determines whether need to shard the \ndata or will it remain in single machine \n    b. Consistency - during requirement gathering what kind of consistency will help if data \nneeds to be in same DB protected by ACID or something or can be distributed in multiple \nstores to avhieve query patterns\n    c. Acess patterns - Ur APIs can help answer what kind of schema is requried , normalised \n , denormalised , what kind of indexes \n\n\n2. Entities , Keys and Relationships \n\n    a. Your core entities will translate to tables \n    b.  Define core_id as primary Key \n    c. Relationships can be enforced through FK (but not required man not used in grab as expensive)\n\n\n3. Indexes \n    a. Have proper indexes to support query patterns \n\n\n4. Normalization and denormalization \n    a. Start with normalization and keep schema clean as data duplication leads to consistency problem \n      which is harder to solve \n\n    b. denormalised data is needed mostly for read heavey case which can be lifted\n       to cache data \n\n5. Sharding \n   a. WHen data gets too large or CPU/Memory limits cross thresholds (See numbers to know)\n   b. Shard by main query pattern avoid cross region shards it hard to maintain",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Different database model options \n\n1. Relational databases SQL\n   - have databases, tables, rows , columns,  \n   - structured data \n   - concept of primary key , indexes for faster querying of data \n   - foriegn key for refrential integrity \n   - provides ACID properties \n   - widely used , can be scalable (shared , partitioned what not\n\n2. Document Base \n   - Has data in document format\n   - ** suitable for requirement having changing data needs as data can be added on any row \n   - In SD interviewes the requirement is tight so data change need is hardly needed\n   - i.e. a key can have whole data into a document. (Denomoralized kind of form)\n   - updates can be expensive as need to read and update whole json \n   - queriyng becomes easy for a key having all data\n   - querying becomes difficult for corss join kind of operation across ids\n   -  Eg: MongoDb\n3. Wide Column \n   - Creates new column for insertion on rows eg each posts will have different column for a user in Cassandra\n   - its kind of append only hence optimised for writes like Casandra LSM tree \n   - high writes cases are analytics , timeseries etc\n   - Eg Casandra\n4. Key Value \n    - Simple in memory database used for caching , flags or storage sometimes\n    - as in memory they are faster than traditional SQLS \n    - mostly used with SQL to have something like caching layer for reads before SQL \n    - key , value pair , so data is mostly according to query pattern of keys \n    - Eg : Redis , DynamoDB\n5. Graph Database \n    - They have the storages as nodes and edges of graph \n    - almost never used in system design interviews\n    - even big social media companies like linkedin ,  facebook uses mysql \n\n\n\n\nSchema Design Fundamentals \n\n\n1. Start with requriements\n    a. Data volume - during requirement gathering determines whether need to shard the \ndata or will it remain in single machine \n    b. Consistency - during requirement gathering what kind of consistency will help if data \nneeds to be in same DB protected by ACID or something or can be distributed in multiple \nstores to avhieve query patterns\n    c. Acess patterns - Ur APIs can help answer what kind of schema is requried , normalised \n , denormalised , what kind of indexes \n\n\n2. Entities , Keys and Relationships \n\n    a. Your core entities will translate to tables \n    b.  Define core_id as primary Key \n    c. Relationships can be enforced through FK (but not required man not used in grab as expensive)\n\n\n3. Indexes \n    a. Have proper indexes to support query patterns \n\n\n4. Normalization and denormalization \n    a. Start with normalization and keep schema clean as data duplication leads to consistency problem \n      which is harder to solve \n\n    b. denormalised data is needed mostly for read heavey case which can be lifted\n       to cache data \n\n5. Sharding \n   a. WHen data gets too large or CPU/Memory limits cross thresholds (See numbers to know)\n   b. Shard by main query pattern avoid cross region shards it hard to maintain",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}