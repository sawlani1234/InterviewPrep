{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "5r1s04ERsH3340oRQ9LTE",
      "type": "text",
      "x": 17636.898336157832,
      "y": 19192.150324262617,
      "width": 135.69993591308594,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aH",
      "roundness": null,
      "seed": 2131300465,
      "version": 20,
      "versionNonce": 1416198161,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761423269497,
      "link": null,
      "locked": false,
      "text": "API DESIGN \n\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "API DESIGN \n\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "MZ8JIvDf0VqiR0Rseg8cl",
      "type": "text",
      "x": 17543.898336157832,
      "y": 19263.150324262617,
      "width": 427.1796875,
      "height": 200,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aK",
      "roundness": null,
      "seed": 1257158161,
      "version": 125,
      "versionNonce": 1791817361,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761423520950,
      "link": null,
      "locked": false,
      "text": "Types of API Paradigm \n\n1. REST \n2. GRPC \n3. GraphQL (Not used much if needed later)\n\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Types of API Paradigm \n\n1. REST \n2. GRPC \n3. GraphQL (Not used much if needed later)\n\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "DNcIVXjr02q4Wque05sGf",
      "type": "text",
      "x": 17473.898336157832,
      "y": 19455.150324262617,
      "width": 1036.0994873046875,
      "height": 1250,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aL",
      "roundness": null,
      "seed": 679498801,
      "version": 2429,
      "versionNonce": 1396049023,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761425153807,
      "link": null,
      "locked": false,
      "text": "1. REST (Representational State Transfer) - over HTTPS \n\n   a. Verbs like GET , PUT , PATCH , POST , DELETE on resource like tickets , booking for ticketmaster\n   b. When creating REST API apply in resource format like tickets, bookings\n   c. it should be plural \n   d. data can be in URl itself , or as query param if optional  GET events/:id\n   e. if multiple resource then can establish parent-child in URL itself , GET events/{:id}/booking\n   f. Used for external service communication \n   g. Response will have status code and API response , some common codes to be handy \n\n        a. 200 (OK) , b. 404 (Bad REquest) , c. (401 unauthorized) , d. 429 (too many request)\n        e. 503 (internal server error)\n\n\n2. GRPC\n    a. rpc provided by google is used the most , GRPC , which mainly binary searlized protocol buffers\n    b. uses verbs and actions \n    c. over HTTP/2 , multiplexing , streaming \n    d. for internal service communication \n    e. type safety \n\n\n\n PAGINATION \n\n1. OFFSET BASED  - \n    a, offset limit\n    b. static + small data set \n    c. default choice\n    d. queries all data even for a specific offset\n\n2. CURSOR BASED - \n     a. based on timestamp and id \n     b. first hit retunrs cursor of next page\n     c. next query is based on that cursor \n     d. used when data changes and stable data is needed nothing to be missed \n     e. high volume of data \n     f. uses custom indexing over cursor \n\n\nAUTHENTICATION \n\n1. Internal service basically uses API keys , random generated string \n   can be used for auth , rate limiting the client \n\n2. JWT - External users when interact basically they login and system generates JWT \n   json web token which has user_id , expiry_time and role ,and same jwt is used \n   in subsequent request which is checked by server to identify authencity of user  \n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. REST (Representational State Transfer) - over HTTPS \n\n   a. Verbs like GET , PUT , PATCH , POST , DELETE on resource like tickets , booking for ticketmaster\n   b. When creating REST API apply in resource format like tickets, bookings\n   c. it should be plural \n   d. data can be in URl itself , or as query param if optional  GET events/:id\n   e. if multiple resource then can establish parent-child in URL itself , GET events/{:id}/booking\n   f. Used for external service communication \n   g. Response will have status code and API response , some common codes to be handy \n\n        a. 200 (OK) , b. 404 (Bad REquest) , c. (401 unauthorized) , d. 429 (too many request)\n        e. 503 (internal server error)\n\n\n2. GRPC\n    a. rpc provided by google is used the most , GRPC , which mainly binary searlized protocol buffers\n    b. uses verbs and actions \n    c. over HTTP/2 , multiplexing , streaming \n    d. for internal service communication \n    e. type safety \n\n\n\n PAGINATION \n\n1. OFFSET BASED  - \n    a, offset limit\n    b. static + small data set \n    c. default choice\n    d. queries all data even for a specific offset\n\n2. CURSOR BASED - \n     a. based on timestamp and id \n     b. first hit retunrs cursor of next page\n     c. next query is based on that cursor \n     d. used when data changes and stable data is needed nothing to be missed \n     e. high volume of data \n     f. uses custom indexing over cursor \n\n\nAUTHENTICATION \n\n1. Internal service basically uses API keys , random generated string \n   can be used for auth , rate limiting the client \n\n2. JWT - External users when interact basically they login and system generates JWT \n   json web token which has user_id , expiry_time and role ,and same jwt is used \n   in subsequent request which is checked by server to identify authencity of user  \n\n",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}